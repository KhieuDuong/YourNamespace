// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package YourNamespace

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type YourMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsYourMessage(buf []byte, offset flatbuffers.UOffsetT) *YourMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &YourMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishYourMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsYourMessage(buf []byte, offset flatbuffers.UOffsetT) *YourMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &YourMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedYourMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *YourMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *YourMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *YourMessage) TagName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *YourMessage) TagValue() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *YourMessage) MutateTagValue(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *YourMessage) Flag() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *YourMessage) MutateFlag(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func (rcv *YourMessage) Action() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *YourMessage) MutateAction(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func YourMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func YourMessageAddTagName(builder *flatbuffers.Builder, tagName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(tagName), 0)
}
func YourMessageAddTagValue(builder *flatbuffers.Builder, tagValue int8) {
	builder.PrependInt8Slot(1, tagValue, 0)
}
func YourMessageAddFlag(builder *flatbuffers.Builder, flag int8) {
	builder.PrependInt8Slot(2, flag, 0)
}
func YourMessageAddAction(builder *flatbuffers.Builder, action int8) {
	builder.PrependInt8Slot(3, action, 0)
}
func YourMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
